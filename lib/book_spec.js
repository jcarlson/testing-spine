// Generated by CoffeeScript 1.7.1
(function() {
  describe('Book', function() {
    return describe('.checkout(isbn)', function() {
      beforeEach(function() {
        this.isbn = '1234567890';
        this.ajax = new $.Deferred();
        return spyOn($, 'ajax').andReturn(this.ajax);
      });
      it('returns a thenable promise', function() {
        var promise;
        promise = Book.checkout(this.isbn);
        return expect(promise.then).toEqual(jasmine.any(Function));
      });
      it('triggers a loading:start event', function() {
        var spy;
        spy = jasmine.createSpy('loading');
        Book.on('loading', spy);
        Book.checkout(this.isbn);
        return expect(spy).toHaveBeenCalledWith(true, this.isbn);
      });
      it('makes an ajax request', function() {
        Book.checkout(this.isbn);
        return expect($.ajax).toHaveBeenCalledWith("/books/" + this.isbn);
      });
      it('resolves the promise with a Book', function() {
        var condition, promise, resolver, spy;
        spy = jasmine.createSpy('then');
        promise = Book.checkout(this.isbn);
        promise.then(spy);
        resolver = (function(_this) {
          return function() {
            return _this.ajax.resolve({
              title: 'Testing Spine',
              author: 'Jarrod Carlson'
            });
          };
        })(this);
        condition = function() {
          return spy.wasCalled;
        };
        setTimeout(resolver, 100);
        waitsFor(condition, 'Spy should be called', 500);
        return runs(function() {
          return expect(spy).toHaveBeenCalledWith(jasmine.any(Book));
        });
      });
      return it('triggers a loading:end event', function() {
        var condition, resolver, spy;
        spy = jasmine.createSpy('loading');
        Book.on('loading', spy);
        Book.checkout(this.isbn);
        resolver = (function(_this) {
          return function() {
            return _this.ajax.resolve({
              title: 'Testing Spine',
              author: 'Jarrod Carlson'
            });
          };
        })(this);
        condition = function() {
          return spy.callCount === 2;
        };
        setTimeout(resolver, 100);
        waitsFor(condition, 'Spy should be called', 500);
        return runs(function() {
          return expect(spy).toHaveBeenCalledWith(false, this.isbn);
        });
      });
    });
  });

}).call(this);
